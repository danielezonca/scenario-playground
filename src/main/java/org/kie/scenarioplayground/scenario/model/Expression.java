package org.kie.scenarioplayground.scenario.model;

import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.kie.scenarioplayground.scenario.utils.ClassConverterFactory;

public class Expression {

    private final List<ExpressionElement> expressionElements = new LinkedList<>();

    private final ExpressionIdentifier expressionIdentifier;

    private Class<?> clazz;

    // TODO introduce unique id (not autogenerated)
    public Expression(ExpressionIdentifier expressionIdentifier, Class<?> rootClass) {
        this.expressionIdentifier = expressionIdentifier;
        this.clazz = rootClass;
    }

    public String getFullExpression() {
        return expressionElements.stream().map(ExpressionElement::getStep).collect(Collectors.joining("."));
    }

    public List<ExpressionElement> getExpressionElements() {
        return expressionElements;
    }

    public void addExpressionElement(String stepName) {
        try {
            this.clazz = clazz.getDeclaredField(stepName).getType();
        } catch (NoSuchFieldException e) {
            throw new IllegalArgumentException("Impossible to find a field with name '" + stepName + "' in class '" + clazz.getCanonicalName() + "'");
        }
        expressionElements.add(new ExpressionElement(stepName));
    }

    public Class<?> getClazz() {
        return clazz;
    }

    public Function<Object, ?> getConverter() {
        return ClassConverterFactory.getConverter(clazz);
    }

    public ExpressionIdentifier getExpressionIdentifier() {
        return expressionIdentifier;
    }

    public static class ExpressionElement {

        private final String step;

        public ExpressionElement(String step) {
            this.step = step;
        }

        public String getStep() {
            return step;
        }
    }

    public static class ExpressionIdentifier {

        private final String name;
        private final FactMappingType type;

        public ExpressionIdentifier(String name, FactMappingType type) {
            this.name = name;
            this.type = type;
        }

        public String getName() {
            return name;
        }

        public FactMappingType getType() {
            return type;
        }
    }

    public static ExpressionIdentifier identifier(String name, FactMappingType type) {
        return new ExpressionIdentifier(name, type);
    }
}
